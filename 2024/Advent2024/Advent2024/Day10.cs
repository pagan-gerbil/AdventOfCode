using AdventUtils;
using AdventUtils.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Advent2024;

internal class Day10 : DayBase
{
    protected override string _sample1 => "89010123\r\n78121874\r\n87430965\r\n96549874\r\n45678903\r\n32019012\r\n01329801\r\n10456732";

    protected override string _part1 => "7651234510103430129656654566543012101234544567676545\r\n8340987643212345038743783087452143450925655438585432\r\n9205676544569416545032192196567854567810710129891201\r\n0114323456678507896123010105432945498789878778100323\r\n1023210987897612387654981234941834354308909689011414\r\n4321301010767887434767876547870921267210218574326505\r\n5650452121456996545897987676589810898876123465467876\r\n4781965432348765698018734585476701017965019894894966\r\n9890874321089450367129653090365432676874320767743987\r\n0781103016567321458934532101270121085401221678652156\r\n1692012923498212367012983501989789098320034569565043\r\n2543127874321003450143477652876652167012123430676530\r\n3432234566543234321894568943905443256587656321089421\r\n4391001057872145430765410878912321101498943243989321\r\n0189432326981056741696321767010630122367050112078930\r\n3276593410456747890781011054321545012454198703163210\r\n4566782561267832781652322123765436723543217654254301\r\n9687601670358901692343123098890127834984503234348911\r\n8794512385443210543510004567734323941076678105067410\r\n0123410496554381235671212321065419452345549876154323\r\n4320321587010190134587389412176108760632438963235432\r\n5411289698121285421098498503489954321541328754556741\r\n6700348787232376332567567694567869325670019669430890\r\n7889465676543101221410698587645678410581204578521321\r\n4976534587894123430321587450784349525890323467670410\r\n3098621298765036541543676521698237656765412896789567\r\n2180590178981047897632101434532118949896106701693458\r\n3671287065432156788912012321089001232787765432542109\r\n4576396101276549874301015401672101301289850343432101\r\n0985405234387632965432109872543985423477891296508765\r\n1256714985496101876343234563837676510566780187219656\r\n0349823076567987654894303474988543412365443210389345\r\n1256712187458978703765412985679812305430301223478234\r\n0210603492324569812654501874876703276321212984560143\r\n4389896501215498701967012565945432181430365806543231\r\n5676287618900398632878123474236701090568456717632100\r\n5432109807651217540169010089147898101279894328986521\r\n6701018712349106543254322128056763012389765010147432\r\n7891127689678100145101013438987652121450110981238901\r\n8980334574549233236232304587012343210969231476545432\r\n8901265463032147867347212698743476521878542345696543\r\n7898378352104056998478923787654389430677653218787656\r\n6987499243693456787567014568785203434587965109690145\r\n5496587156782321893459985439690112521097874065432234\r\n0381016045071040134578376326541045671010123678321101\r\n1272325432101056923667289017432434982234234349830765\r\n0365430340342347810756108128921125543145641256545854\r\n6674321201259659876843201234210014698076450127894903\r\n7889210398768760145998910165436786787189361898765212\r\n6901165409694321234107323876325495698321276345654303\r\n5432076210585012321236454989414324321230985432783212\r\n4345189823476523410345567898701015450101234321098101";

    protected override string Part1Internal(string input)
    {
        IEnumerable<IGrouping<Coord, Trail>> groups = GetTrails(input);
        var result = groups.Sum(x => x.Select(y => y.Current).Distinct().Count());

        return result.ToString();
    }

    protected override string Part2Internal(string input)
    {
        var trails = GetTrails(input);

        var result = trails.Sum(x=>x.Count());

        return result.ToString();
    }


    private static IEnumerable<IGrouping<Coord, Trail>> GetTrails(string input)
    {
        var grid = input.Split(Environment.NewLine).Select(x => x.ToCharArray().Select(y => int.Parse(y.ToString())).ToArray()).ToArray();

        var height = grid.Length;
        var width = grid[0].Length;

        var trailsInProgress = new Queue<Trail>();
        var finishedTrails = new List<Trail>();
        for (var x = 0; x < height; x++)
            for (var y = 0; y < width; y++)
                if (grid[x][y] == 0) trailsInProgress.Enqueue(new Trail(new Coord(x, y), new Coord(x, y)));

        while (trailsInProgress.Any())
        {
            var trail = trailsInProgress.Dequeue();
            var current = grid[trail.Current.X][trail.Current.Y];

            if (current < 9)
            {
                if (trail.Current.Y > 0 && grid[trail.Current.X][trail.Current.Y - 1] == current + 1)
                    trailsInProgress.Enqueue(new Trail(trail.Start, new Coord(trail.Current.X, trail.Current.Y - 1)));
                if (trail.Current.Y + 1 < width && grid[trail.Current.X][trail.Current.Y + 1] == current + 1)
                    trailsInProgress.Enqueue(new Trail(trail.Start, new Coord(trail.Current.X, trail.Current.Y + 1)));
                if (trail.Current.X > 0 && grid[trail.Current.X - 1][trail.Current.Y] == current + 1)
                    trailsInProgress.Enqueue(new Trail(trail.Start, new Coord(trail.Current.X - 1, trail.Current.Y)));
                if (trail.Current.X + 1 < width && grid[trail.Current.X + 1][trail.Current.Y] == current + 1)
                    trailsInProgress.Enqueue(new Trail(trail.Start, new Coord(trail.Current.X + 1, trail.Current.Y)));
            }
            else
            {
                finishedTrails.Add(trail);
            }
        }

        var groups = finishedTrails.GroupBy(x => x.Start);
        return groups;
    }

    private struct Trail(Coord start, Coord current)
    {
        public Coord Start { get; } = start;
        public Coord Current { get; } = current;
    }
}
